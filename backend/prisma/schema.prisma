// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phoneNumber String?  @unique
  name        String
  avatar      String?
  role        Role     @default(TOURIST)
  isVerified  Boolean  @default(false)
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]
  wishlist Wishlist[]

  @@map("users")
}

model State {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?
  image       String?

  cities City[]

  @@map("states")
}

model City {
  id          String @id @default(cuid())
  name        String
  description String?
  image       String?
  stateId     String

  state        State         @relation(fields: [stateId], references: [id])
  destinations Destination[]

  @@map("cities")
}

model Destination {
  id          String  @id @default(cuid())
  name        String
  description String
  images      String[]
  latitude    Float?
  longitude   Float?
  category    String
  rating      Float   @default(0)
  cityId      String

  city     City      @relation(fields: [cityId], references: [id])
  packages Package[]
  reviews  Review[]

  @@map("destinations")
}

model Package {
  id              String          @id @default(cuid())
  title           String
  description     String
  duration        Int // in days
  basePrice       Float
  currentPrice    Float
  maxGroupSize    Int
  inclusions      String[]
  exclusions      String[]
  itinerary       Json
  images          String[]
  category        PackageCategory
  difficulty      Difficulty      @default(EASY)
  isActive        Boolean         @default(true)
  destinationId   String
  availableSlots  Int             @default(10)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  destination Destination @relation(fields: [destinationId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  wishlist    Wishlist[]

  @@map("packages")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  packageId     String
  travelDate    DateTime
  adults        Int           @default(1)
  children      Int           @default(0)
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  @@map("bookings")
}

model Review {
  id            String  @id @default(cuid())
  userId        String
  packageId     String?
  destinationId String?
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id])
  package     Package?     @relation(fields: [packageId], references: [id])
  destination Destination? @relation(fields: [destinationId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  packageId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  @@unique([userId, packageId])
  @@map("wishlist")
}

enum Role {
  TOURIST
  ADMIN
  TRAVEL_AGENT
}

enum PackageCategory {
  FAMILY
  SOLO
  ADVENTURE
  HONEYMOON
  CORPORATE
  CULTURAL
  RELIGIOUS
}

enum Difficulty {
  EASY
  MODERATE
  HARD
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
